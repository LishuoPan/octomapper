<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
  	<arg name="frame" default="/vicon/D455/D455" />
	<!-- run vicon bridge -->
  	<include file="$(find vicon_bridge)/launch/vicon.launch"/>
	<include file="$(find octomapper)/launch/rs_camera.launch"/>

  	<node pkg="tf" type="static_transform_publisher" name="baselink_broadcaster" args="0 0 0 0.0 0.0 -0.0 1.0 $(arg frame) /camera_link 100" />

	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="vicon/world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="7.0" />
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/camera/depth/color/points" />
	
	</node>

	<!-- run rviz -->
  	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find octomapper)/launch/mapper.rviz" required="true" />
	
</launch>